name: "deploy android apk"

on:
  push:
    tags:
      - "*"

jobs:
  Gradle:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Make Gradle executable
        run: chmod +x ./gradlew
      - name: Build Release APK
        run: ./gradlew assembleRelease
      - name: Releasing using Hub
        uses: kyze8439690/action-release-releaseapk@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          APP_FOLDER: app
# on:
#   push:
#     branches:
#       - "master"

# jobs:
#   buildApk:
#     name: Generate apk
#     runs-on: ubuntu-18.04

#     steps:
#       - uses: actions/checkout@v1
#       - name: set up JDK 1.8
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.8
#       - name: Build debug apk

#         run: bash ./gradlew assembleDebug --stacktrace

#       - name: Upload apk
#         uses: actions/upload-artifact@v1
#         with:
#           name: app
#           path: app/build/outputs/apk/debug/app-debug.apk

#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Build project # This would actually build your project, using zip for an example artifact
#         run: |
#           zip --junk-paths my-artifact README.md
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.sha }}
#           draft: false
#           prerelease: false
#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#           asset_path: app/build/outputs/apk/debug/app-debug.apk
#           asset_name: app-debug.apk
#           asset_content_type: application/apk
      # - name: Checkout code
        # uses: actions/checkout@v2
      # - name: Build project # This would actually build your project, using zip for an example artifact
        # run: |
          # zip --junk-paths my-artifact README.md
      # - name: Create Release
        # id: create_release
        # uses: actions/create-release@v1
        # env:
          # GITHUB_TOKEN: ${{ secrets.TOKEN }}
        # with:
          # tag_name: ${{ github.ref }}
          # release_name: Release ${{ github.sha }}
          # draft: false
          # prerelease: false
      # - name: Upload Release Asset
        # id: upload-release-asset
        # uses: actions/upload-release-asset@v1
        # env:
          # GITHUB_TOKEN: ${{ secrets.TOKEN }}
        # with:
          # upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          # asset_path: app/build/outputs/apk/debug/
          # asset_name: app-debug.apk
          # asset_content_type: application/apk
